(load "../util.scm")
(define instructions (read (open-input-file "input.txt")))
(define the-memory (map (lambda (r) (cons r 0))
			(remove-duplicates (append (map first instructions)
						   (map fifth instructions)))))
(define (get-register regname)
  (find (lambda (r) (eq? (car r) regname))
	the-memory))
(define (value regname) (cdr (get-register regname)))
(define (set-value! regname value) (set-cdr! (get-register regname) value))
(define (get-proc p)
  (cond ((eq? p 'inc) +)
	((eq? p 'dec) -)
	((eq? p '<) <)
	((eq? p '>) >)
	((eq? p '<=) <=)
	((eq? p '>=) >=)
	((eq? p '==) =)
	((eq? p '!=) (lambda (x y) (not (= x y))))
	(else (display "Unknown procedure"))))
  
(define (exec instructions result)
  (if (null? instructions)
      result
      (begin
	(let* ((instr (car instructions))
	      (pred (get-proc (sixth instr)))
	      (proc (get-proc (second instr)))
	      (val-regA (value (fifth instr)))
	      (regB (first instr))
	      (val-regB (value regB))
	      (immA (seventh instr))
	      (immB (third instr)))
	  (if (pred val-regA immA)
	      (set-value! regB (proc val-regB immB))
	      #f))
	(exec (cdr instructions)
	      (apply max (cons result (map cdr the-memory)))))))
	       

